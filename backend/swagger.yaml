openapi: 3.0.3
info:
  title: My Bank Application API
  version: 1.1.0
  description: API documentation for a secure bank application, including user authentication, transactions, and balance management.

servers:
  - url: http://localhost:3000/api
    description: Local Development Server

tags:
  - name: Authentication
    description: User registration, login, and session management
  - name: Account
    description: User account balance and details
  - name: Transactions
    description: Managing financial transactions

paths:
  /auth/sign-up:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - phoneNumber
                - fullName
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: newuser@example.com
                password:
                  type: string
                  format: password
                  description: User's password (min 4 digits)
                  example: mySecurePass123
                phoneNumber:
                  type: string
                  description: User's phone number (e.g., +972501234567)
                  example: "0501234567"
                fullName:
                  type: string
                  description: User's full name
                  example: Jane Doe
      responses:
        '201':
          description: User has signed up and verification code sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has signed up. Verification code sent to your phone.
                  id:
                    type: string
                    example: "60c72b2f9b1e8b001c8e4d1f"
                  email:
                    type: string
                    example: newuser@example.com
                  fullName:
                    type: string
                    example: Jane Doe
                  isPhoneVerified:
                    type: boolean
                    example: false
        '400':
          description: Bad Request (missing fields, invalid format, etc.)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All details are required
        '409':
          description: Conflict (email or phone already taken and verified)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is already taken and verified.
        '500':
          description: Server Error (e.g., failed to send OTP)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to send verification code. Please try again.

  /auth/login:
    post:
      summary: Log in an existing user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: mySecurePass123
      responses:
        '200':
          description: Login successful. Returns an access token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  email:
                    type: string
                    example: user@example.com
                  fullName:
                    type: string
                    example: John Doe
                  accessToken:
                    type: string
                    description: JWT token for authenticated requests.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad Request (missing email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '401':
          description: Unauthorized (incorrect credentials)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect email or password
        '403':
          description: Forbidden (phone number not verified)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Phone number not verified. Please complete verification.
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error during login

  /auth/sign-up/validate:
    post:
      summary: Verify phone number with OTP code
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - userId
              properties:
                code:
                  type: string
                  description: The OTP verification code sent to the user's phone.
                  example: "123456"
                userId:
                  type: string
                  description: The ID of the user to be verified.
                  example: "60c72b2f9b1e8b001c8e4d1f"
      responses:
        '200':
          description: Phone number verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Phone number verified successfully
                  email:
                    type: string
                    format: email
                    example: user@example.com
                  fullName:
                    type: string
                    example: John Doe
                  accessToken:
                    type: string
                    description: JWT token for subsequent authenticated requests.
        '400':
          description: Bad Request (missing user ID or OTP code, user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing user ID or OTP code
        '401':
          description: Unauthorized (incorrect OTP code)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect code
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error during phone verification

  /auth/logout:
    delete:
      summary: Invalidate user session and log out
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully.
        '400':
          description: Bad Request (e.g., no token provided in request)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No token provided for logout.
        '401':
          description: Unauthorized (if authenticateToken fails to find a token or token is blacklisted)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Forbidden (if token is invalid or expired by JWT verification)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Failed to process logout.

  /balance:
    get:
      summary: Get current user balance
      tags:
        - Account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user balance.
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    example: 10000.00
        '401':
          description: Unauthorized (token missing or invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Forbidden (invalid or expired token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error fetching balance

  /transactions:
    get:
      summary: Get recent transactions for the authenticated user
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          description: Number of recent transactions to retrieve.
      responses:
        '200':
          description: Successfully retrieved user transactions.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    amount:
                      type: number
                      format: float
                      description: Transaction amount (negative for outgoing, positive for incoming)
                      example: -50.00
                    participant:
                      type: string
                      description: Email of the other party in the transaction
                      example: recipient@example.com
                    date:
                      type: string
                      format: date
                      example: "2024-06-27"
                    time:
                      type: string
                      example: "10:30:00"
        '401':
          description: Unauthorized (token missing or invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Forbidden (invalid or expired token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error fetching transactions

  /transactions/send:
    post:
      summary: Send money to another user
      tags:
        - Transactions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipientEmail
                - amount
              properties:
                recipientEmail:
                  type: string
                  format: email
                  description: Email of the recipient
                  example: recipient@example.com
                amount:
                  type: number
                  format: float
                  description: Amount to send (must be positive)
                  example: 100.00
      responses:
        '200':
          description: Money sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Money sent successfully
                  newBalance:
                    type: number
                    format: float
                    example: 9900.00
        '400':
          description: Bad Request (missing fields, invalid amount, recipient not found, insufficient funds)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Recipient not found
        '401':
          description: Unauthorized (token missing or invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Forbidden (invalid or expired token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error during transaction

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT